import 'package:flutter/material.dart';
import 'package:http/http.dart';
import 'package:hue_dart/hue_dart.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'functions.dart';
import 'package:flutter/rendering.dart';

//Global Values
var prefs;
final client = new Client();
bool connecting = false;

void main() async {
  //debugPaintSizeEnabled = true;
  prefs = await SharedPreferences.getInstance();

  runApp(MyApp());
}

/*
Need to adjust the connect function.

- Search for bridge
- Find one and ask if you'd like to connect

yes {
  - connect
} else {
  - display all bridges found
  - connect to one

  OR

  input own ip manually
}
*/

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Firefly Dev Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  double sliderVal = 20;

  void sliderChange(e) {
    setState(() {
      sliderVal = e;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Column(children: <Widget>[
        Text(
          '$sliderVal',
        ),
        Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Slider(
                value: sliderVal,
                onChanged: (double e) => sliderChange(e),
                min: 0,
                divisions: 255,
                max: 255,
              )
            ],
          ),
        ),
        Expanded(
          child: FutureBuilder(
              future: findBridges(),
              builder: (BuildContext context, AsyncSnapshot snapshot) {
                if (snapshot.hasData) {
                  print('theres data');
                  return new Card(
                      elevation: 12,
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10)),
                      child: ListView.builder(
                          itemCount: snapshot.data.length,
                          itemBuilder: (BuildContext context, int index) {
                            return new ListTile(
                              title: Text('Bridge ${snapshot.data[index].id}'),
                              subtitle:
                                  Text('IP: ${snapshot.data[index].ipAddress}'),
                              leading: Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [Icon(Icons.highlight, size: 30)]),
                              onTap: () {
                                connectToBridge(snapshot.data[index]);
                              },
                            );
                          }));
                } else {
                  return new Center(child: CircularProgressIndicator());
                }
              }),
        )
      ]),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          connectToBridge(null);
        },
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ),
    );
  }
}
